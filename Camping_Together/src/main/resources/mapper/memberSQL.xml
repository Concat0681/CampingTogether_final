<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="member">

	<!-- 회원Id -->
	<select id="selectId" resultType="string">
		select member_id as memberId from member 
	</select>
	
	
	<!-- 회원  -->
	<select id="selectOneMember" parameterType="m" resultType="m">
		select 
			member_no as memberNo,
			member_id as memberId,
			member_pw as memberPw,
			member_name as memberName,
			member_phone as memberPhone,
			member_addr as memberAddr,
			member_photo as memberPhoto,
			member_grade as memberGrade,
			member_email as memberEmail,
			member_name as memberName
		 from member where member_id=#{memberId} 
		 <if test="memberPw != null"> 
		 	and member_pw=#{memberPw}
		 </if>
		
	</select>
	
	<!-- 이름과 이메일로 아이디 찾가 -->
	<select id="searchOneMemberId" parameterType="m" resultType="m">
		select 
		    member_no as memberNo,
		    member_id as memberId,
		    member_pw as memberPw,
		    member_name as memberName,
		    member_phone as memberPhone,
		    member_addr as memberAddr,
		    member_photo as memberPhoto,
		    member_grade as memberGrade,
		    member_email as memberEmail
		from member where member_email = #{memberEmail} and member_name =#{memberName} 
	</select>
	
	<!-- 아이디와 이메일로 아이디 찾가 -->
	<select id="searchOneMemberPw" parameterType="m" resultType="m">
		select 
		    member_no as memberNo,
		    member_id as memberId,
		    member_pw as memberPw,
		    member_name as memberName,
		    member_phone as memberPhone,
		    member_addr as memberAddr,
		    member_photo as memberPhoto,
		    member_grade as memberGrade,
		    member_email as memberEmail
		from member where member_email = #{memberEmail} and member_id =#{memberId} 
	</select>
	
	<!-- 회원 가입시 아이디 중복체크 -->
	<select id="idCheck" resultType="_int">
		select count(*) from member where member_id =#{memberId}
	</select>
	
	<!-- 회원 가입 -->
	<insert id="insertMember" parameterType="m"> <!--  insert delete update ResultType 절대 안씀 -->
		insert into member values(member_seq.nextval,#{memberId},#{memberPw}, to_char(sysdate, 'yyyy-mm-dd'),#{memberPhone}, #{memberAddr}, default ,#{memberEmail},#{memberGrade},#{memberName})
	</insert>
	
    <!-- 회원탈퇴 -->
	<delete id="deleteMember" parameterType="_int">
		delete from member where member_no = #{_parameter}
	</delete>
	
	<!-- 캠핑장 결제 내역리스트 -->
	<select id="selectPayList" parameterType="map" resultType="cp">
 	select * from
			(select rownum as rnum, m.*from
				(select
					camping_room_title as campingRoomTitle, 
					camping_room_price as campingRoomPrice, 
					camping_payment_date as campingPaymentDate, 
					check_in as checkIn, 
					check_out as checkOut,
					member_no
				from camping_payment 
				left join camping_reservation using(CAMPING_RESERVATION_NO) 
				left join camping_room using(camping_room_no) order by camping_payment_date desc
				)m
			)
			where rnum between #{start} and #{end} and member_no = #{memberNo}
	</select>
	
	<select id="totalCount" parameterType="_int" resultType="_int">
			select count(*) from camping_payment
				join camping_reservation using(CAMPING_RESERVATION_NO)
			 where member_no = #{_parameter}
	</select>
	
	
	<!-- 쇼핑몰 결제 내역 리스트 -->
	<select id="selectProcuctPayList" parameterType="map" resultType="pp">
		select * from
			(select rownum as rnum, p.*from
				(select
					shop_title as productName,
					sell_count as buyCount,
					order_date as productPaymentDate,
					total_price as totalPrice,
				    shop_order.member_id
		from shop_order
			join shop using(shop_no)
		order by order_date desc)p)
		where rnum between #{start} and #{end} and member_id=#{memberId}
	</select>
	
	<select id="productTotalCount" parameterType="String" resultType="_int">
		select count(*) from shop_order
		where member_id = #{memberId}
	</select>
	

		<!-- 캠핑장 리뷰 리스트  -->
	<select id="selectMyReviewList" parameterType="map" resultType="mr">
		select * from
			(select rownum as rnum, c.* from
				(select 
				camping_no as campingNo,
		        c.camping_title as campingTitle,
		        nvl((select crp.filepath from camping_review_photo crp where CAMPING_REVIEW_PHOTO_NO = 
		             (select min(CAMPING_REVIEW_PHOTO_NO) 
		             from camping_review_photo crp 
		             where crp.camping_review_no = cr.camping_review_no)),'사진없음') as filepath,
			             cr.Camping_review_content as campingReviewContent,
			             cr.Camping_review_date as campingReviewDate,
			             cr.member_id
	    from camping_review cr left join camping c using(camping_no) 
        where cr.member_id=#{memberId}
        order by Camping_review_date desc)c) 
        where rnum between #{start} and #{end}	
	</select>
		
	<!-- 캠핑장 리뷰 리스트 총 게시물 수   -->
	<select id="selectMyReviewListCount" parameterType="String" resultType="_int">
		select count(*) from camping_review where member_id=#{_parameter}
	</select>
	

	<!-- 전체회원 -->
	<select id="selectAllMember" parameterType="map" resultType="m">
		select * from
		(select rownum as rnum, m.* from
		(select
					member_no as memberNo,
					member_id as memberId,
					member_name as memberName,
					member_date as memberDate,
					member_grade as memberGrade
				from member order by member_date desc)m)
		where not memberGrade in('a') and rnum between #{start} and #{end}
	</select>
	

	<select id="selectAllMemberCount" resultType="_int">
		select count(*) from member
	</select>


	<select id="selectShopBasketCount" parameterType="String" resultType="_int">
		select count(*) from basket where member_id = #{memberId}
	</select>
	
	<delete id="deleteWishList" parameterType="_int">
		delete from basket where shop_no=#{_parameter}
	</delete>

	
	<!-- 관리자 회원정보 조회 -->
	<select id="adminOneMember" parameterType="_int" resultType="m">
		select 
				member_no as memberNo,
				member_name as memberName,
				member_phone as memberPhone,
				member_phone as memberPhone,
				member_email as memberEmail,
				member_addr as memberAddr
		 from member where member_no = #{_parameter}
	</select>
	
	
	<!-- admin shop 리스트  -->
	<select id="selectAdminShop" parameterType="map" resultType="asl">
		select * from
			(select rownum as rnum, m.*from
		        (select
		        shop_title as shopTitle,
		        shop_price as shopPrice,
		        score as score,
		        file_path as filepath,
		        max_count as count,
		        member_id
		from shop join shop_photo using(shop_no)order by score desc)m)
		where rnum between #{start} and #{end} and member_id=#{memberId}
	</select>
	
	<select id="selectAdminShopCount" resultType="_int">
		select count(*) from shop
	</select>
	
	
		<select id="selectCampingRoom" parameterType="_int" resultType="cr">
			select
				camping_room_no as campingRoomNo,
			    camping_room_title as campingRoomTitle,
			    camping_room_type as campingRoomType,
			    camping_room_price as campingRoomPrice
			from camping_room where camping_no = #{_parameter}
		</select>
	
	
		<select id="selectAdminMember" parameterType="String" resultType="m">
			select 
				member_no as memberNo,
				member_id as memberId,
				member_pw as memberPw,
				member_name as memberName,
				member_phone as memberPhone,
				member_addr as memberAddr,
				member_photo as memberPhoto,
				member_grade as memberGrade,
				member_email as memberEmail,
				member_name as memberName
		 from member where member_id=#{_parameter} 
		</select>
		
		
		<select id="updateAdminPw" parameterType="m">
			update member 
				set 
					member_pw = #{memberPw} 
				where member_id= #{memberId}
		
		</select>

</mapper>




