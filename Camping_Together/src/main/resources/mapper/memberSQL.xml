<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="member">
	<!-- 회원  -->
	<select id="selectOneMember" parameterType="m" resultType="m">
		select 
			member_no as memberNo,
			member_id as memberId,
			member_pw as memberPw,
			member_name as memberName,
			member_phone as memberPhone,
			member_addr as memberAddr,
			member_photo as memberPhoto,
			member_grade as memberGrade,
			member_email as memberEmail,
			member_name as memberName
		 from member where member_id=#{memberId} 
		 <if test="memberPw != null"> 
		 	and member_pw=#{memberPw}
		 </if>
		
	</select>
	
	<!-- 회원 가입시 아이디 중복체크 -->
	<select id="idCheck" resultType="integer">
		select count(*) from member where member_id =#{member_id}
	</select>
	
	<!-- 회원 가입 -->
	<insert id="insertMember" parameterType="m"> <!--  insert delete update ResultType 절대 안씀 -->
		insert into member values(member_seq.nextval,#{memberId},#{memberPw}, to_char(sysdate, 'yyyy-mm-dd'),#{memberPhone}, default, #{memberAddr}, null ,#{memberEmail},#{memberGrade},#{memberName})
	</insert>
	
    <!-- 회원탈퇴 -->
	<delete id="deleteMember" parameterType="_int">
		delete from member where member_no = #{_parameter}
	</delete>
	
	<!-- 캠핑장 결제 내역리스트 -->
	<select id="selectPayList" parameterType="map" resultType="cp">
 	select * from
			(select rownum as rnum, m.*from
				(select
					camping_room_title as campingRoomTitle, 
					camping_room_price as campingRoomPrice, 
					camping_payment_date as campingPaymentDate, 
					check_in as checkIn, 
					check_out as checkOut,
					member_no
				from camping_payment 
			join camping_reservation using(CAMPING_RESERVATION_NO) 
			join camping_room using(camping_room_no) order by camping_payment_date desc)m)
			where rnum between #{start} and #{end} and member_no = #{memberNo}
	</select>
	
	<select id="totalCount" parameterType="_int" resultType="_int">
			select count(*) from camping_payment
				join camping_reservation using(CAMPING_RESERVATION_NO)
			 where member_no = #{_parameter}
	</select>
	
	
	<!-- 쇼핑몰 결제 내역 리스트 -->
	<select id="selectProcuctPayList" parameterType="map" resultType="pp">
		select * from
			(select rownum as rnum, p.*from
				(select
					shop_title as productName,
					sell_count as buyCount,
					order_date as productPaymentDate,
					total_price as totalPrice,
				    shop_order.member_id
		from shop_order
			join shop using(shop_no)
		order by order_date desc)p)
		where rnum between #{start} and #{end} and member_id=#{memberId}
	</select>
	
	<select id="productTotalCount" parameterType="String" resultType="_int">
		select count(*) from shop_order
		where member_id = #{memberId}
	</select>
	
	
	<!-- 캠핑장 리뷰 리스트  -->
	<select id="selectMyReviewList" parameterType="map" resultType="mr">
		select * from
			(select rownum as rnum, c.* from
				(select 
				camping_no as campingNo,
		        c.camping_title as campingTitle,
		        nvl((select crp.filepath from camping_review_photo crp where CAMPING_REVIEW_PHOTO_NO = 
		             (select min(CAMPING_REVIEW_PHOTO_NO) 
		             from camping_review_photo crp 
		             where crp.camping_review_no = cr.camping_review_no)),'사진없음') as filepath,
			             cr.Camping_review_content as campingReviewContent,
			             cr.Camping_review_date as campingReviewDate,
			             cr.member_id
	    from camping_review cr left join camping c using(camping_no) order by Camping_review_date desc)c)
  	    where rnum between #{start} and #{end} and member_id=#{memberId}	
	</select>
		
	<!-- 캠핑장 리뷰 리스트 총 게시물 수   -->
	<select id="selectMyReviewListCount" parameterType="String" resultType="_int">
		select count(*) from camping_review
	</select>
	
	
	<!-- 판매자 my캠핑장 -->
	<select id="selectSellCampingList" parameterType="map" resultType="sc">
	
		
	
	</select>
	
	
</mapper>
